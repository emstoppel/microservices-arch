// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package evaluationsmocks is a generated GoMock package.
package evaluationsmocks

import (
	context "context"
	reflect "reflect"

	evaluations "github.com/emstoppel/microservices-arch/evaluation"
	gomock "github.com/golang/mock/gomock"
)

// MockDao is a mock of Dao interface.
type MockDao struct {
	ctrl     *gomock.Controller
	recorder *MockDaoMockRecorder
}

// MockDaoMockRecorder is the mock recorder for MockDao.
type MockDaoMockRecorder struct {
	mock *MockDao
}

// NewMockDao creates a new mock instance.
func NewMockDao(ctrl *gomock.Controller) *MockDao {
	mock := &MockDao{ctrl: ctrl}
	mock.recorder = &MockDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDao) EXPECT() *MockDaoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDao) Get(ctx context.Context, tag string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, tag)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockDaoMockRecorder) Get(ctx, tag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDao)(nil).Get), ctx, tag)
}

// Save mocks base method.
func (m *MockDao) Save(ctx context.Context, evaluation evaluations.EvaluationData) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, evaluation)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDaoMockRecorder) Save(ctx, evaluation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDao)(nil).Save), ctx, evaluation)
}
